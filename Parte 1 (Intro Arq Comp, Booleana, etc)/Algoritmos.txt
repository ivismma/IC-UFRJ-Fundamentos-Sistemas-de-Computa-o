
Converter um número de uma outra base para a base de trabalho.
Alg[I] é a sequência dos algarismos que formam o número na outra base.

Importação:	I <- Número de algarismos.	Num <- 0.
ProxAlg:	I = 0 ? -> Fim.
		I <- I -1.	Num <- Num * Base + Alg[I].	-> ProxAlg

Importação:	I <- Número de algarismos.	Num <- 0.
ProxAlg:	I = 0 ? -> Fim.
		I <- I - 1.	Num <- Num + Alg[I] * Base ^ I.	-> ProxAlg.


Converter um número da base de trabalho para uma outra base.
Alg[I] é a sequência dos algarismos que formam o número na outra base.

Exportação:	I <- 0.
ProxAlg:	N < Base? -> UltAlg.
		Alg[I] <- resto da divisão de N por Base.
		N <- N / Base.	I <- I + 1.	-> ProxAlg.
UltAlg:		Alg[I] <- N.	-> Fim.


Somar dois números de N algarismos.
Parc1, Parc2 e o Resultado são sequências de N algarismos.
Soma:		Vai <- 0. 	I <- 0.
ProxAlg:	Soma <- Parc1[I] + Parc2[I] + Vai.
		Vai <- 0.	Soma < Base ? -> SemVai.
		Vai <- 1.	Soma <- Soma - Base.
SemVai:		Resultado[I] <- Soma.	I <- I + 1.
		I < N ? -> ProxAlg.
		Vai > 0 ? Resultado[I] <- Vai.	-> Fim.

de cima - de baixo - pede == cima - ( baixo + pede )
   1
   45
 - 18
-----
   27

Subtrair dois números de N algarismos.
Minuendo, Subtraendo e o Resto são sequências de N algarismos.
Minuendo é maior ou igual ao Subtraendo.
Subtração:	Pede <- 0.	I <- 0.
ProxAlg:	Min <- Minuendo[I].  Sub <- Subtraendo[I] + Pede.
		Pede <- 0.	Min >= Sub ? -> NãoHáPede.
		Pede <- 1.	Min <- Min + Base.
NãoHáPede:	Resto[I] <- Min - Sub.	I <- I + 1.
		I < N ? -> ProxAlg.	-> Fim.


738 + 475
N é 3, Base é 10.
Parc1[0] é 8, Parc1[1] é 3, Parc1[2] é 7.
Parc2[0] é 5, Parc2[1] é 7, Parc2[2] é 4.

Vai <= 0.	I <- 0.
Soma <- 8 + 5 + 0 = 13.
Vai <- 0.
Vai <- 1.	Soma <- Soma - 10 = 3.
Resultado[0] <- 3.	I <- 0 + 1 = 1.
Soma <- 3 + 7 + 1 = 11.
Vai <- 0.
Vai <- 1.	Soma <- 11 - 10 = 1.
Resultado[1] <- 1.	I <- 1 + 1 = 2.
Soma <- 7 + 4 + 1 = 12.
Vai <-0. 
Vai <- 1.	Soma <- 12 -10 = 2.
Resultado[2] <- 2.	I <- 2 + 1 = 3.
Resultado[3] <- 1.

1213

Converter 724 decimal -> base 14.
I <- 0
Alg[0] <- resto de 724 / 14 = 10.
N <- 724 / 14 = 51. I = 0 + 1 = 1.
Alg[1] <- resto de 51 / 14 = 9.
N <- 51 / 14 = 3. I = 1 + 1 = 2.
Alg[2] <- 3.

39A
(3*14+9)*14+10 = (42+9)*14+10 = 51*14+10 = 714+10 = 724.

I <-  0.
Alg[0] <- resto de 724 / 14 = 10.
N <- 724 / 14 = 51.	I <- 0 + 1 = 1.
Alg[1] <- resto de 51 / 14 = 9 
N <- 51 / 14 = 3.	I <- 1 + 1 = 2.
Alg[2] <- 3.

Resultado 39A base 14.
3 * 14 ^ 2 + 9 * 14 + 10 = 3 * 196 + 9 * 14 + 3 = 724.


435 decimal -> base 12
N é 435, base é 12.

I <-  0.
Alg[0] <- resto de 435 / 12 = 3.
N <- 435 / 12 = 36.	I <- 0 + 1 = 1.
Alg[1] <- resto de 36 / 12 = 0.
N <- 36 / 12 = 3.	I <- 1 + 1 = 2.
Alg[2] <- 3.

303 na base 12
3 * 12^2 + 3 = 435


247 decimal -> base 8
N é 247, Base é 8. 

I <- 0.
Alg[0] <- resto de 247 / 8 = 7.
N <- 247 / 8 = 30.	I <- 0 + 1 = 1.
Alg[1] <- resto de 30 / 8 = 6.
N <- 30 / 8 = 3.	I <- 1 + 1 = 2.
Alg[2] <- 3.

Alg[2] é 3, Alg[1] é 6,367 Alg[0] é 7.  367 na base 8
3 * 64 + 6 * 8 + 7 = 192 + 48 + 7 = 247.


1201 na base 3:
Alg[3] é 1, Alg[2] é 2, Alg[1] é 0, Alg[0] é 1, base é 3.

I <- 4, Num <- 0
I <- 4 - 1 = 3.	Num <- 0 * 3 + 1 = 1.
I <- 3 - 1 = 2. Num <- 1 * 3 + 2 = 5.
I <- 2 - 1 = 1. Num <- 5 * 3 + 0 = 15.
I <- 1 - 1 = 0. Num <- 15 * 3 + 1 = 46.



I <- 4, Num <- 0.
I <- 4 - 1 = 3. Num <- 0 + 1 * 3 ^ 3 = 27.
I <- 3 - 1 = 2. Num <- 27 + 2 * 3 ^ 2 = 45.
I <- 2 - 1 = 1. Num <- 45 + 0 * 3 ^ 1 = 45.
I <- 1 - 1 = 0. Num <- 45 + 1 * 3 ^ 0 = 46. 


unsigned char Base;
usingned char Minuendo[N], Subtraendo[N], Resto[N];

void subtrai ( int N )
     { unsigned char Pede, I, Min, Sub;
       Perde = 0; I = 0;
       do { Min = Minuendo[I];
	    Sub = Subtraendo[I] + Pede;
	    Pede = 0; 
	    if ( Min < Sub ) { Pede = 1; Min = Min + Base; }
	    Resto[I] = Min - Sub;  I = I + 1; }
	}